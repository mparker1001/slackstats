#!/usr/bin/php
<?php
// Taken from https://github.com/mparker1001/slackstats. Please refer to this repo for further instructions.

// Get API token and set timezone from environment variables
$token = getenv('SLACK_API_TOKEN');
date_default_timezone_set(getenv('SLACK_TIMEZONE'));

// Set cache expire time - 1 hour by default
$cache_expire_time = "3600";
// Configure script usage message
$str_usage = <<<EOD
usage:  slackstats -s [start_date_in_YYYYMMDDHHMM] -e [end_date_in_YYYYMMDDHHMM] -f [file_containing_emails_to_query (Optional)]
                   -u [email_address_to_query (Optional)] -x [file_containing_channels_to_exclude (Optional)]
                   -n [exclude_zero_message_channels (Optional)]
 ** Note that if both the -f and -u options are specified, the -f option will be used **


EOD;

// Initialize finished variable
$has_more = false;

// Set number of messages to max
$count = 1000;

// Include the first message by default on the first run
$inclusive = 1;

// Initialize loop variable for message data;
$i = 0;

// Initialize custom user list boolean
$customuserlist = false;

//Initialize message data array
unset($messagedata);
$messagedata=array();

/* --- Check and set command line arguments --- */
$options = getopt("s:e:f:x:u:n");
$kill_script = false;

if ( is_null($options['s']) || $options['s'] == false ) {
  $str_error = "ERROR: Incorrect or Missing Start Date. The -s option is requried.\n";
  $kill_script = true;
}
if ( is_null($options['e']) || $options['e'] == false ) {
  $str_error .= "ERROR: Incorrect or Missing End Date. The -e option is required.\n";
  $kill_script = true;
}
if ($kill_script) {
  echo $str_error;
  die($str_usage);
}
else {
  $start_date = strtotime($options['s']);
  $end_date = strtotime($options['e']);
  if ( (array_key_exists("f",$options)) && ($options['f'] != false) ) {
    $customuserlist = true;
    $userincludelist = file($options['f'], FILE_IGNORE_NEW_LINES);
  }
  elseif ( (array_key_exists("u",$options)) && ($options['u'] != false) ) {
    $customuserlist = true;
    $userincludelist[0] = $options['u'];
  }
  if ( (array_key_exists("x",$options)) && ($options['x'] != false) ) {
    $excludechannels = true;
    $channelexcludelist = file($options['x'], FILE_IGNORE_NEW_LINES);
  }
  if ( array_key_exists("n",$options) ) {
    $suppresszero = true;
  }
  $messagecachefile = "messages_" . strtotime($options['s']) . "_" . strtotime($options['e']) . ".cache";
}

// Set cache file names
$usercachefile = "users.cache";
$groupcachefile = "groups.cache";


/* --- Pull User Names -- */

if ( ( (time() - @filemtime($usercachefile)) > $cache_expire_time ) || $customuserlist) { // If the cache file does not exist or is expired or if the user list is custom, get the org data from the API
  echo "Querying Slack API for user list...";

  // Set Slack API Endpoint
  $apiendpoint = "https://slack.com/api/users.list";

  $fields = array(
    'token' => urlencode($token),
  );

  //url-ify the data for the POST
  foreach($fields as $key=>$value) { $fields_string .= $key.'='.$value.'&'; }
  rtrim($fields_string, '&');

  //open connection
  $ch = curl_init();

  //set the url, number of POST vars, POST data
  curl_setopt($ch,CURLOPT_URL, $apiendpoint);
  curl_setopt($ch,CURLOPT_POST, count($fields));
  curl_setopt($ch,CURLOPT_POSTFIELDS, $fields_string);
  curl_setopt($ch,CURLOPT_RETURNTRANSFER, true);

  //execute post
  $result = json_decode(curl_exec($ch));
  $userlist = array();
  foreach ($result->members as $member ) {
    if ( $customuserlist && !(in_array($member->profile->email,$userincludelist)) ) {
      continue;
    }
    else {
      $userlist[$member->id] = array("name"=>$member->name,"email"=>$member->profile->email,"real_name"=>$member->real_name);
    }
  }
  
  //close connection
  curl_close($ch);

  // After looping through all the pages, save the org data to a cache file
  echo "DONE\n";
  file_put_contents($usercachefile, json_encode($userlist));

}
else { // If the cache file is not expired, import the org data from the cache file
  $userlist = json_decode(file_get_contents($usercachefile), true);
}


/* --- Pull Group Names ---*/

if ( (time() - @filemtime($groupcachefile)) > $cache_expire_time ) { // If the cache file does not exist or is expired, get the group data from the API
  echo "Querying Slack API for group data...";
  @unlink($groupcachefile);

  // Set Slack API Endpoint
  $apiendpoint = "https://slack.com/api/groups.list";
  $fields = array(
    'token' => urlencode($token),
  );

  //url-ify the data for the POST
  foreach($fields as $key=>$value) { $fields_string .= $key.'='.$value.'&'; }
  rtrim($fields_string, '&');

  //open connection
  $ch = curl_init();

  //set the url, number of POST vars, POST data
  curl_setopt($ch,CURLOPT_URL, $apiendpoint);
  curl_setopt($ch,CURLOPT_POST, count($fields));
  curl_setopt($ch,CURLOPT_POSTFIELDS, $fields_string);
  curl_setopt($ch,CURLOPT_RETURNTRANSFER, true);

  //execute post
  $result = json_decode(curl_exec($ch));
  $grouplist = array();
  foreach ($result->groups as $group ) {
    $grouplist[$group->id] = $group->name;
  }

//close connection
  curl_close($ch);

  // Store the contents into a cache file
  echo "DONE\n";
  file_put_contents($groupcachefile, json_encode($grouplist));

}
else { // If the cache file is not expired, import the commit data from the cache file
  echo "Pulling group data from cache\n\n";
  $grouplist = json_decode(file_get_contents($groupcachefile), true);
}


/* --- Pull Slack Message Data -- */

if ( (time() - @filemtime($messagecachefile)) > $cache_expire_time ) { // If the cache file does not exist or is expired, get the commit data from the API
  echo "Querying Slack API for message data";
  @unlink($messagecachefile);

  // Set Slack API Endpoint
  $apiendpoint = "https://slack.com/api/groups.history";

  foreach($grouplist as $channelkey=>$channel) {
    $oldest=$start_date;
    $latest=$end_date;
    do {
      $fields = array(
        'token' => urlencode($token),
        'channel' => urlencode($channelkey),
        'count' => urlencode($count),
        'inclusive' => urlencode($inclusive),
        'oldest' => urlencode($oldest),
        'latest' => urlencode($latest)
      );

      //url-ify the data for the POST
      foreach($fields as $key=>$value) { $fields_string .= $key.'='.$value.'&'; }
      rtrim($fields_string, '&');

      //open connection
      $ch = curl_init();

      //set the url, number of POST vars, POST data
      curl_setopt($ch,CURLOPT_URL, $apiendpoint);
      curl_setopt($ch,CURLOPT_POST, count($fields));
      curl_setopt($ch,CURLOPT_POSTFIELDS, $fields_string);
      curl_setopt($ch,CURLOPT_RETURNTRANSFER, true);

      //execute post
      $result = json_decode(curl_exec($ch));

      //close connection
      curl_close($ch);
      foreach ($result->messages as $message ) {
        if ( $channel == "devops-support") {
        }
        if ( $message->subtype == "" ) {  //Only display messages without a subtype since these are actual user typed messages
          $messagedata[$i]['ts'] = $message->ts;
          $messagedata[$i]['user'] = $message->user;
          $messagedata[$i]['channel'] = $channel;
          $i++;
        }
        $oldest = $message->ts;
      }
      $has_more = $result->has_more;
      $inclusive = 0;
    } while ( $has_more == true );
    echo ".";
  }
  // After looping through all the pages, save the message data to a cache file
  echo "DONE\n\n";
  file_put_contents($messagecachefile, json_encode($messagedata));
}
else {
  echo "Pulling message data from cache\n\n";
  $messagedata = json_decode(file_get_contents($messagecachefile), true);
}


/* --- Display user slack stats --- */

$i=0;

foreach($userlist as $userkey=>$user) {
  $totalmessages = 0;
  $str_user = $user['name'];
  if ( $user['real_name'] != "" ) {
    $str_user .= " - " . $user['real_name'];
  }
  if ( $user['email'] != "") {
    $str_user .= " (" . $user['email'] . ")";
  }
  echo "\nSlack messages for $str_user between " . date("Y-m-d h:i A",$start_date) . " and " . date("Y-m-d h:i A",$end_date) . "\n";
  echo str_pad("Channel",40) . str_pad("Messages",8) . "\n";
  echo str_pad("------------",40) . str_pad("--------",8) . "\n";
  foreach($grouplist as $channelkey=>$channel) {
    if ( $excludechannels && in_array($channel,$channelexcludelist) ) {
      continue;
    }
    else{
      foreach($messagedata as $message) {
        if ( ($message['user'] == $userkey) && ($message['channel'] == $channel) ) {
          $i++;
        }
      }
      if ( ($i == 0) && $suppresszero ) {
        continue;
      }
      else {
        echo str_pad($channel,40) . str_pad($i,8) . "\n";
      }
      $totalmessages += $i;
      $i=0;
    }
  }
  echo str_pad("-----",40) . str_pad("---",8) . "\n";
  echo str_pad("Total",40) . str_pad($totalmessages,8) . "\n\n";
}

?>
